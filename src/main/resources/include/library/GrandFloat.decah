class GrandFloat {
    float f;
    float erreur;

    //Somme de deux float et on garde l'erreur dans notre structure
    void additionSimple(float f, float g) {
        float somme = f+g;
        // on récupère le f erroné
        float fprime = somme - g;
        // on récupère le g erroné
        float gprime = somme - fprime;
        this.f = somme;
        //On calcule l'erreur sur f et g et on somme les erreurs
        this.erreur = (f-fprime) + (g-gprime);
    }

    void additionGrandFloat(GrandFloat gf) {
        float f_gf = gf.f;
        float erreur_gf = gf.erreur;
        float f_this = this.f;
        float erreur_this = this.erreur;
        this.additionSimple(f_this, f_gf);
        gf.additionSimple(erreur_this, erreur_gf);
        this.erreur = this.erreur+gf.f;
        this.additionSimple(this.f, this.erreur);
        this.erreur = this.erreur + gf.erreur;
        this.additionSimple(this.f, this.erreur);
        gf.f = f_gf;
        gf.erreur = erreur_gf;
    }

    GrandFloat monAddition(GrandFloat ff, GrandFloat gg){
        GrandFloat resultat = new GrandFloat();
        resultat.f = ff.f + gg.f;
        resultat.erreur = ff.erreur + gg.erreur;
        return  resultat;
    }

    // calcul des puissance entière de floatants
    float pow(float f, int n) {
        int k = n;
        float tmp;
        float multEnd = 1.0;
        if (n == 0) {
            return 1.0;
        }
        else if (n > 0) {
            tmp = f;
            while (k > 1) {
                if (k%2 == 1) {
                    multEnd = multEnd*tmp;
                }
                tmp = tmp*tmp;
                k = k/2;
            }
        }
        else {
            tmp = 1/f;
            while (k < -1) {
                if ((-k)%2 == 1) {
                    multEnd = multEnd*tmp;
                }
                tmp = tmp*tmp;
                k = k/2;
            }
        }
        return tmp*multEnd;
    }


    // transforme un float en Grand float, sans gain de précision( fonction donc auxiliaire ) mais aussi sans perte
    GrandFloat split(float g, int n){
        float split = (pow(2,n)+1) * g;
        float tmp = split - g;
        float f = split - tmp;
        float erreur = g-f;
        GrandFloat res = new GrandFloat();
        res.f = f;
        res.erreur = erreur;
        return res;
    }


    // multiplie deux float et garde l'erreur dans notre structure
    GrandFloat multiplicationSimple(float f, float g){
        float produit = f*g;
        GrandFloat tmp = split(f,12);
        GrandFloat tmp1 = split(g,12);
        // première erreur la différence
        float erreur1 = produit - (tmp.f * tmp1.f);
        // deuxième erreur : le produit de la partie haute de tmp par l'erreur de tmp1 et ainsi de suite
        float erreur2 = erreur1 - (tmp.erreur * tmp1.f);
        float erreur3 = erreur2 - (tmp.f *tmp1.erreur);
        float erreur = tmp.erreur * tmp1.erreur - erreur3;
        GrandFloat res = new GrandFloat();
        res.f = produit;
        res.erreur = erreur;
        return res;
    }

    // multiplication de grands float
    GrandFloat multiplicationGrandFloat(GrandFloat ff, GrandFloat gg){
        GrandFloat Produit = multiplicationSimple(ff.f,gg.f);
        // on ajoute les erreurs de multiplication par les erreurs
        Produit.erreur = Produit.erreur + ff.f*gg.erreur;
        Produit.erreur = Produit.erreur + ff.erreur + gg.f;
        // on récupère les erreurs significatifs
        Produit.additionSimple(Produit.f,Produit.erreur);
        return Produit;
    }

    boolean estPlusGrandque(GrandFloat ff){
        return ( this.f+this.erreur > ff.f+this.erreur );
    }

    GrandFloat GrandPi(){
        GrandFloat pi = new GrandFloat();
        pi.f = 3.141592;
        pi.erreur = 0.000000653589793;
        return pi;
    }

    GrandFloat GrandPiSur2(){
        GrandFloat pisur2 = new GrandFloat();
        pisur2.f = 1.570796;
        pisur2.erreur = 0.00000032679489651;
        return pisur2;
    }

    void ajouter_erreur(float f){
        this.erreur = this.erreur + f;
    }

    void ajouter_float(float f){
        this.f = this.f + f;
    }

    GrandFloat moinsGrandpi(){
        GrandFloat moinspi= new GrandFloat();
        moinspi.f = -3.141592;
        moinspi.erreur = -0.000000653589793;
        return moinspi;
    }



    float adaptGrandFloat(float f){
        GrandFloat MoinsGrand2pi=new GrandFloat(), Grand2pi=new GrandFloat();
        GrandFloat resultat=new GrandFloat(), pi = GrandPi();
        int temp;
        GrandFloat coef = new GrandFloat();
        Grand2pi.additionSimple(6.283185,0.00000030718);
        MoinsGrand2pi.additionSimple(-6.283185,-0.00000030718);
        temp = (int)(-f/Grand2pi.f);
        coef.additionSimple(temp, 0.0);
        resultat.additionSimple(f,0.0);
        resultat.additionGrandFloat(multiplicationGrandFloat(coef,Grand2pi));
        if (f > 3.14159265359){
            resultat.additionSimple(f,-6.28318530718);
            while (resultat.estPlusGrandque(pi)){
                resultat.additionGrandFloat(MoinsGrand2pi);
            }
            return resultat.f + resultat.erreur;
        }
        if (f < -3.1415926539){
            resultat.additionSimple(f,6.28318530718);
            while (moinsGrandpi().estPlusGrandque(resultat)){
                resultat.additionGrandFloat(Grand2pi);
            }
            return resultat.f + resultat.erreur;
        }
        return f;
    }

    float pimoinsf( float f){
        GrandFloat r = new GrandFloat();
        r.additionSimple(-f,0.0);
        r.additionGrandFloat(GrandPi());
        return r.f + r.erreur;
    }

    float pisur2moinsf(float f){
        GrandFloat r = new GrandFloat();
        r.additionSimple(-f,0.0);
        r.additionGrandFloat(GrandPiSur2());
        return r.f + r.erreur;
    }
}