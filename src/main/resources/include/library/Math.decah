#include "GrandFloat.decah"

class Math {
    GrandFloat g = new GrandFloat();

    float pisur2(){
        return g.GrandPiSur2().f;
    }

    float pi(){
        return g.GrandPi().f;
    }

    /*------------- Fonctions principales -------------- */

    float sin(float f) {
        f = g.adaptGrandFloat(f);
        if (0<=f && f<=pisur2()) {
            return sin_GrandFloat(f);
        }
        if (f>pisur2() && f<=pi()){
            //sin(pi-f)
            //return sin(GrandFloat.additionGrandFloat(GrandPi(), new GrandFloat(-f,0)).getFLoatt());
            f=g.pimoinsf(f);
            return sin_GrandFloat(f);
        }
        if (-pi()<=f && f<0){
            return -sin(-f);
        }
        errorAdapt();
    }

    float cos(float f) {
        f=g.adaptGrandFloat(f);
        if (f==0){
            return 1.0;
        }
        if (0<=f && f<=pi()/2) {
            //return sin(g.pisur2moinsf(f));
            return cos_GrandFloat(f);
        }
        if (f>pi()/2 && f<=pi()){
            f=g.pisur2moinsf(f);
            return sin(f);
        }
        if (-pi()<=f && f<0){
            return cos(-f);
        }
        errorAdapt();
    }

    //tan(x)=sin(x)/cos(x) version finale
    float tan(float f){
         return sin(f)/cos(f);
    }

    //fonction arctan version finale qui utilise les deux algos
    float atan(float f) {
        if (abs(f)>0.9 && abs(f)<1.1){
            //return atan_algo(f); //plus précis en Java
            return atan_GrandFloat(f);
        }
        return atan_GrandFloat(f);
    }

    //arcsin(x)=arctan(x/sqrt(1-x²))) version finale
    float asin(float f) {
        if (f<1 && f>-1 ) {
            //return atan(f/sqrt(1-pow(f,2))); //plus précis en Java
            return asin_GrandFloat(f);
        }
        if (f==1){
            return pi()/2;
        }
        if (f==-1){
            return -pi()/2;
        }
        errorArgument();
    }

    //acos(x)=pi/2 - asin(x) version finale
    float acos(float f) {
        return 1.570796327-asin(f);
    }


    // calcul de l'ulp
    float ulp(float f) {
        if (f == 0) {
            return g.pow(2,-149);
        }
        return g.pow(2,exposant(f))*g.pow(2,-23);
    }


    // calcul l'exposant de la représentaion en binaire 32
    int exposant(float f){
        int exp;
        int f1;
        if (f < 0) {
            return exposant(-f);
        }
        if (f==0) {
            return 0;
        }
        exp = 0;
        if (f > 1) {
            //f1=(int)f;
            while (f1>1){
                exp=exp+1;
                f1=f1/2;
            }
            return exp;
        }
        if (f<1){
            while(f<1){
                exp=exp-1;
                f=f*2;
            }
            return exp;
        }
        return exp;
    }

    /*------------- Fonctions annexes ---------------*/

    // fonction factoriel
    int factoriel(int n){
        int a = 1;
        if (n==0){
            return 1;
        }
        while (n>1){
            a=a*n;
            n=n-1;
        }
        return a;
    }

   //fonction valeur absolue
    float abs(float f){
        if (f>=0){
            return f;
        }
        else {
            return -f;
        }
    }

    float sin_GrandFloat(float f){
        int k=0;
        GrandFloat solution= new GrandFloat();
        GrandFloat r;
        float tmp=1.0, tmp1=1.0, fcarre=f*f;
        solution.f = 0.0;
        solution.erreur = 0.0;
        //Cas particulier pour k=0
        tmp = 1.0;
        tmp1= f;
        r = g.multiplicationSimple(tmp,tmp1);
        solution = g.additionGrandFloat(solution,r);
        k = k+1;
        while (k<10){
            tmp = tmp/(2*k*(2*k+1));// tmp = 1.0/factoriel(2*k+1);
            tmp1= -tmp1*fcarre; //tmp1 = (-1)^k*f^(2k+1)
            r = g.multiplicationSimple(tmp,tmp1);
            solution = g.additionGrandFloat(solution,r);
            k = k+1;
        }
        return solution.f + solution.erreur;
    }

    float cos_GrandFloat( float f){

        float tmp;
        float tmp1;
        float fcarre=f*f;
        int k=0;
        GrandFloat r = new GrandFloat();
        GrandFloat solution= new GrandFloat();
        solution.f = 0.0;
        solution.erreur = 0.0;
        //Cas particulier pour k=0
        tmp=1.0;
        tmp1 = 1.0;
        r=g.multiplicationSimple(tmp,tmp1);
        solution=g.additionGrandFloat(solution,r);
        k=k+1;
        while (k<10){
            tmp = tmp/((2*k-1)*2*k); //tmp = 1/(2k!)
            tmp1 = -tmp1*fcarre; //tmp1 = (-1)^k * f^(2k)
            r=g.multiplicationSimple(tmp,tmp1);
            solution=g.additionGrandFloat(solution,r);
            k=k+1;
        }
        return solution.f + solution.erreur;
    }

    float atan_GrandFloat(float f) {

        GrandFloat solution= new GrandFloat();
        float tmp;
        float tmp1;
        int k=0;
        float fcarre = f*f;
        GrandFloat r=new GrandFloat();
        if (f == 1) {
            return 0.78539816;
        }
        else if (f<1 && f>=0 ) {
            //Cas particulier pour k = 0
            tmp=1.0;
            tmp1=f;
            r=g.multiplicationSimple(tmp,tmp1);
            solution=g.additionGrandFloat(solution,r);
            k=k+1;
            while (k < 50) {
                tmp=1.0/(2*k+1);
                tmp1 = -tmp1*f*f; //(-1)^k * f^(2k+1)
                r=g.multiplicationSimple(tmp,tmp1);
                solution=g.additionGrandFloat(solution,r);
                k=k+1;
            }
            return solution.f + solution.erreur;
        }
        else if (f>1) {
            return (pi()/2)-atan_GrandFloat(1/f); //pi/2-atan(1/f)
        }
        else if (f<0) {
            return -atan_GrandFloat(-f);
        }
        errorAdapt();
    }

    float asin_GrandFloat(float f) {
        GrandFloat solution= new GrandFloat();
        float tmp=1.0;
        float tmp1=f;
        float coef=1.0;
        float fcarre = f*f;
        int k=0;
        GrandFloat r=new GrandFloat();
        if (f<=1 && f>=-1 ) { //definie seulement sur -1..1
            solution.f = 0.0;
            solution.erreur = 0.0;
            //Cas particulier k = 0
            r=g.multiplicationSimple(tmp,tmp1);
            solution=g.additionGrandFloat(solution,r);
            k=k+1;
            while (k < 10) {
                coef = coef*k*2;
                tmp=1.0/((2*k+1)*coef*coef);
                //tmp = 1/((2k+1)*(k!*2^k)^2)
                tmp1 = tmp1*fcarre*(2*k-1)*2*k; //tmp1=f^(2k+1)*(2k)!
                r=g.multiplicationSimple(tmp,tmp1);
                solution=g.additionGrandFloat(solution,r);
                k=k+1;
            }
            return solution.f + solution.erreur;
        }
        errorArgument();
    }

    /*------------------ Methode pour lever une erreur -----------------------*/

    void errorAdapt() asm (
        "WSTR \"Internal error of method AdaptGrandFloat.\"
         WNL
         ERROR"
    );

    void errorArgument() asm (
        "WSTR \"Invalid value of argument.\"
         WNL
         ERROR"
    );
}